{"version":3,"sources":["Components/DisplayGrid.jsx","Components/Footer.jsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Grid","useState","rowData","setRowData","useEffect","fetch","then","response","json","console","log","map","m","id","title","className","style","height","columnDefs","headerName","field","sortable","filter","width","resizable","editable","floatingFilter","checkboxSelection","rowSelection","onGridReady","params","onRowDoubleClicked","onRowClicked","event","onColumnResized","defaultColDef","flex","minWidth","GET_DOGS","gql","Footer","useQuery","loading","error","data","youtubers","yt","firstName","y","client","ApolloClient","uri","cache","InMemoryCache","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAmGeA,G,YA5FF,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACRC,EADQ,KACCC,EADD,KAmDf,OAdAC,qBAAU,WASN,OARAC,MAAM,+CACXC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAASC,QAAQC,IAAIF,GACzBL,EAAWK,GACXA,EAAKG,KAAI,SAAAC,GAAC,OAAEH,QAAQC,IAAI,QAASE,EAAEC,GAAI,MAAOD,EAAEE,UAChDL,QAAQC,IAAI,cAAeR,MAGhB,WACHO,QAAQC,IAAI,qBAEjB,IAIC,qBAAKK,UAAU,kBAAkBC,MAAQ,CAAEC,OAAQ,SAAnD,SACI,cAAC,cAAD,CACIC,WApDI,CACZ,CAAEC,WAAY,SAAUC,MAAM,SAAUC,UAAU,EAAMC,QAAQ,EAAMC,MAAO,IAAKC,WAAW,EAAMC,UAAU,EAAMC,gBAAgB,EAAKC,mBAAkB,GAC1J,CAAER,WAAY,KAAMC,MAAO,KAAMC,UAAU,EAAMC,QAAQ,EAAMC,MAAO,IAAKC,WAAW,EAAMC,UAAU,EAAMC,gBAAgB,GAC5H,CAAEP,WAAY,QAASC,MAAO,QAASC,UAAU,EAAMC,QAAQ,EAAKC,MAAM,IAAKC,WAAW,EAAMC,UAAU,EAAMC,gBAAgB,GAChI,CAAEP,WAAY,YAAaC,MAAO,YAAaC,UAAU,EAAMC,QAAQ,EAAKC,MAAM,IAAKC,WAAW,EAAMC,UAAU,EAAMC,gBAAgB,IAiDhIxB,QAASA,EACT0B,aAAa,WACbC,YAhDQ,SAACC,GAIjBrB,QAAQC,IAAI,gBA6CJqB,mBAzCU,SAACD,GACpBrB,QAAQC,IAAI,kBAyCHsB,aA9BS,SAACC,GAClBxB,QAAQC,IAAI,sBA8BJwB,gBA3BY,SAACD,GACrBxB,QAAQC,IAAI,yBA2BJyB,cAAe,CAACC,KAAK,EAAGC,SAAS,W,oKC5DjD,IAAMC,EAAWC,cAAH,KASDC,EAAS,WAAO,IAAD,EACOC,mBAASH,GAAlCI,EADkB,EAClBA,QAASC,EADS,EACTA,MAAOC,EADE,EACFA,KACxB,OAAIF,EAAgB,2CAChBC,EAAc,0CACbC,IAEHnC,QAAQC,IAAIkC,GACZA,EAAKC,UAAUlC,KAAI,SAAAmC,GAAE,OAAErC,QAAQC,IAAI,eAAgBoC,EAAGC,eAOtD,8BAODH,EAAKC,UAAUlC,KAAI,SAAAqC,GAAC,OAAE,6BAAgBA,EAAED,WAATC,EAAEnC,WC7B9BoC,EAAS,IAAIC,eAAa,CAC9BC,IAAK,gCACLC,MAAO,IAAIC,kBA0BEC,MAtBf,WACE,OACE,qBAAKvC,UAAU,MAAf,SACE,eAAC,iBAAD,CAAgBkC,OAAQA,EAAxB,UAIE,4DAQF,cAAC,EAAD,IACA,cAAC,EAAD,UClBSM,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBnD,MAAK,YAAkD,IAA/CoD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.58e4cfd6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\r\n\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport '../App.css'\r\n// sortable: true,  filter: true, width: 400, resiable: true, editable: true, rowSelection=\"multiple\"\r\nconst Grid = () => {\r\n    const [rowData, setRowData] = useState([]);\r\n  \r\n    const colDefs = [\r\n        { headerName: 'userId', field:\"userId\", sortable: true, filter: true, width: 250, resizable: true, editable: true, floatingFilter: true,checkboxSelection:true},\r\n        { headerName: 'id', field: 'id', sortable: true, filter: true, width: 250, resizable: true, editable: true, floatingFilter: true},\r\n        { headerName: 'title', field: 'title', sortable: true, filter: true,width:250, resizable: true, editable: true, floatingFilter: true},\r\n        { headerName: 'completed', field: 'completed', sortable: true, filter: true,width:250, resizable: true, editable: true, floatingFilter: true}\r\n    ]\r\n    // let gridApi;\r\n    const onGridReady = (params) => {\r\n        // gridApi=params.api;\r\n        // setGridApi(params.api);\r\n        // setGridColumnApi(params.columnApi);\r\n        console.log('ready gridd')\r\n    }\r\n\r\n    \r\n    const onDoubleClick = (params) => {\r\n       console.log('doubleclicked')\r\n    }\r\n\r\n    // const onExportClick=()=>{\r\n    //     gridApi.exportDataAsCsv();\r\n    \r\n    //     // setGridApi(params.api);\r\n    //     // setGridColumnApi(params.columnApi);\r\n    //     console.log('Double clicked here')\r\n    // }\r\n\r\n    const onRowClicked = (event) => { \r\n        console.log('A row was clicked'); \r\n    }\r\n\r\n    const onColumnResized = (event) => { \r\n        console.log('A column was resized'); \r\n    }\r\n    useEffect(() => {\r\n        fetch('https://jsonplaceholder.typicode.com/todos/')\r\n  .then(response => response.json())\r\n  .then(json => {console.log(json)\r\n    setRowData(json)\r\n    json.map(m=>console.log('achea', m.id, '   ', m.title))\r\n    console.log('acheaaaa = ', rowData)\r\n})\r\n  \r\n        return () => {\r\n            console.log('clean up stuff')\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n       \r\n        <div className=\"ag-theme-alpine\" style={ { height: '700px'} }>\r\n            <AgGridReact\r\n                columnDefs={colDefs}\r\n                rowData={rowData} \r\n                rowSelection=\"multiple\" \r\n                onGridReady={onGridReady}\r\n                onRowDoubleClicked={onDoubleClick}\r\n                onRowClicked={onRowClicked}\r\n                onColumnResized={onColumnResized} \r\n                defaultColDef={{flex:1, minWidth:100}}\r\n                />\r\n        </div>\r\n        \r\n    );\r\n};\r\n\r\n\r\n const Gridd = () => {\r\n    const data =[\r\n        {name:'dan', age:20},\r\n        {name:'dm', age:30},\r\n        {name:'dabe', age:35},\r\n        {name:'dskdfjm', age:60}\r\n\r\n    ]\r\n    const columns=[\r\n        {headerName:'Name', field:'name' , sortable: true},\r\n        {headerName:'Age', field:'age'}\r\n    ]\r\n    return (\r\n     <div className=\"ag-theme-alpine\" style={{height:'250px'}}>\r\n         \r\n        <AgGridReact  rowData={data} columnDefs={columns}\r\n        defaultColDef={{flex:1, minWidth:100}}\r\n        />\r\n     </div>\r\n    )\r\n}\r\n\r\nexport default Grid; \r\n\r\n","import React from 'react'\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport InstagramIcon from '@material-ui/icons/Instagram';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport CopyrightIcon from '@material-ui/icons/Copyright';\r\nimport '../App.css'\r\nimport { gql, useQuery } from '@apollo/client';\r\n\r\nconst GET_DOGS = gql`\r\n  query GetYoutbers {\r\n    youtubers {\r\n      \r\n      firstName\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Footer = () => {\r\n  const { loading, error, data } = useQuery(GET_DOGS);\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n    if(data)\r\n  {\r\n    console.log(data)\r\n    data.youtubers.map(yt=>console.log(\"youtuber == \", yt.firstName))\r\n    // console.log(ss)\r\n  }\r\n      \r\n    // data.map(s=>console.log(s.sex))\r\n  return (\r\n \r\n    <div>\r\n    {/* {data.dogs.map(dog => (\r\n      <option key={dog.id} value={dog.breed}>\r\n        {dog.breed}\r\n      </option>\r\n    ))} */}\r\n    {/* {JSON.stringify(data)} */}\r\n  {data.youtubers.map(y=><h3 key={y.id}>{y.firstName}</h3>)}\r\n    \r\n </div>\r\n);\r\n  }\r\n// export const Footer: React.FC =() => {\r\n//     return (\r\n//         <div className=\"footer\">\r\n//         <CopyrightIcon /> GollemTimes srl\r\n//         <a href=\"https://www.facebook.com/\"> <FacebookIcon /> </a>\r\n//         <a href=\"https://twitter.com/\"> <TwitterIcon /> </a>\r\n//         <a href=\"https://www.instagram.com/\"> <InstagramIcon /> </a>\r\n//         <a href=\"https://www.linkedin.com/\"> <LinkedInIcon /> </a>\r\n//         </div>\r\n//     )\r\n// }","import React from 'react';\nimport logo from './images/logo.png';\nimport './App.css';\nimport {RegistrationForm} from './Components/RegistrationForm'\nimport Grid from './Components/DisplayGrid'\nimport Nav from './Components/Nav'\nimport {Footer} from './Components/Footer.jsx'\nimport {Table} from './Components/test'\nimport { ApolloClient, InMemoryCache , ApolloProvider} from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql',\n  cache: new InMemoryCache()\n});\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n      {/* <Nav /> */}\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" width=\"50%\" /> */}\n        <p>\n          Welcome to GollemTimes page\n        </p>\n      {/* </header> */}\n      {/* <RegistrationForm /> */}\n     \n      {/* <Grid /> */}\n      {/* <Table /> */}\n      <Grid />\n      <Footer />\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n//y  If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}